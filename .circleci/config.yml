

version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when_to_destroy:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
                    aws cloudformation delete-stack --stack-name udapeople-backend-myid123
                    aws cloudformation delete-stack --stack-name udapeople-frontend-myid123

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 ));
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test-backend
          command: |
            cd backend
            npm install
            npm run test


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
                    yum -y install sudo
                    yum -y install tar
                    yum -y install gzip
                    yum install -y curl
                    yum -y update upgrade
                    pwd
                    ls -la
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-myid123" \
              --parameter-overrides ID="myid123"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
               --template-file ./.circleci/files/frontend.yml \
               --stack-name "udapeople-frontend-myid123" \
               --parameter-overrides ID="myid123" \
               --tags project=udapeople-frontend
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-myid123" \
              --output text >> inventory.txt
              cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment


  configure-infrastructure:
    docker:
     - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["30:09:05:56:ae:23:60:40:19:64:11:ff:2a:06:94:18"]
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Install dependencies
          command: |
                    apk add --update ansible
                    apk add --update tar
                    apk add --update gzip
                    apk add --update nodejs
                    apk add --update npm
                    apk add --update curl
                    pip3 install --upgrade pip
                    pip install awscli
                    pwd
                    ls -la
      - run:
          name: Configure server
          command: |
                    cd .circleci/ansible
                    cat inventory.txt
                    ansible-playbook -i inventory.txt configure-server.yml




  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
                    sudo apt-get update
                    sudo apt-get install -yy less
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
      - run:
          name: Run migrations

          command: |
                   cd backend
                   npm install
                   npm run migrations >> migrationStatus.txt
                   cat migrationStatus.txt

      - run:
         name: Send migration results to kvdb.io ahmed
         command: |
                  if grep -q "has been executed successfully." ./.circleci/migrationStatus/migrationStatus.txt
                  then
                  curl https://kvdb.io/FngteSXUS4uipssbiMphWa/myid123   -d "true"
                  else
                  curl https://kvdb.io/FngteSXUS4uipssbiMphWa/myid123   -d "false"
                  fi





  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |                  
                    cd ./.circleci/ansible    
                    yum history new
                    yum -y install sudo
                    yum install -y curl
                    # sudo yum update -y   
                    curl -sL https://rpm.nodesource.com/setup_13.x | sudo -E bash -
                    sudo yum install -y nodejs
                    # sudo yum install -y gcc-c++ make    
                    node -v        
                    sudo yum repolist
                    sudo yum list installed
                    pwd
                    ls
      - run:
          name: Get backend url
          command: |
            export API_URL="http://2.18.233.6.242:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
                    export API_URL="http://2.18.233.6.242:3030"
                    echo "${API_URL}" > frontend/.env
                    cd frontend
                    npm install
                    npm run build
                    aws s3 cp dist s3://frontend-myid123 --recursive
     
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["79:3d:00:53:89:e2:5a:15:a3:1c:c9:be:7a:54:f9:68"]
      - run:
          name: Install archiving dependencies 
          working_directory: ~/
          command: |   
                    apk add --update tar
                    apk add --update gzip  
      - run:
          name: Install dependencies
          command: |
                    apk add --update ansible
                    apk add --update curl 
                    apk add --update rsync 
                    apk add --update openssh
                    apk add --update nodejs
                    apk add --update npm 
                    apk add --update unzip
                    ansible --version
                    pip3 install --upgrade pip
                    pip3 install awscli
                    aws --version 
      # - run:
      #     name: add database values to env files to EC2
      #     command: |
      #               echo ENVIROMENT=production >> "backend/.env"
      #               echo NODE_ENV=production >> "backend/.env"
      #               echo VERSION=1 >> "backend/.env"
      #               echo BACKEND_PORT=3030 >> "backend/.env"
      #               echo TYPEORM_CONNECTION=postgres >> "backend/.env"
      #               echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
      #               echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
      #               echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
      #               echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
      #               echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
      #               echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
      #               echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
      #               echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env" 
      #               echo LOGGLY_SUBDOMAIN=$yoursubdomain >> "backend/.env"  
      #               echo LOGGLY_TOKEN=$yourlogglytoken >> "backend/.env"
      #               echo LOGGLY_LEVEL=$info >> "backend/.env"
      #               echo GHOST_SUITE_ID=$GHOST_SUITE_ID >> "backend/.env"
      #               echo GHOST_API_KEY=$GHOST_API_KEY >> "backend/.env"
      #               cd backend
      #               pwd
      #               ls -la 
      #               cat .env
           
      - run:
          name: Compress dist Files
          working_directory: ~/project 
          command: |
                    cd backend
                    ls -la
                    cd ~/project/; tar -zcvf backend.tar.gz ./backend/ 
                    pwd
                    ls -la
      - run:
          name: Deploy backend
          no_output_timeout: 10m
          command: |                                         
                   cd backend
                    npm i
                    npm run build
                    cd ..
                    # Zip the directory
                    tar -C backend -czvf backend.tar.gz .
                    cd .circleci/ansible
                    echo "Contents  of the inventory.txt file is -------"
                    cat inventory.txt
                    ansible-playbook -i inventory.txt deploy-backend.yml --private-key newkey.pem
 

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi


workflows:

  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      #- deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      # - configure-infrastructure
      #     requires: [deploy-infrastructure]
      #- run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend
      #     requires: [run-migrations]
       - deploy-backend
        #  requires: [configure-infrastructure]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:

      #     requires: [cloudfront-update]